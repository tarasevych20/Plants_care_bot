# bot.py
import os, json, sqlite3, requests, datetime as dt
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ConversationHandler
)

# ====== CONFIG ======
TOKEN = os.environ["TELEGRAM_TOKEN"]
PLANT_ID_API_KEY = os.environ.get("PLANT_ID_API_KEY", "")
TZ = ZoneInfo("Europe/Kyiv")
DB_PATH = "plants.db"

# ====== DB ======
def db():
    c = sqlite3.connect(DB_PATH)
    c.execute("""
    CREATE TABLE IF NOT EXISTS plants(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      care TEXT NOT NULL,
      photo BLOB,
      water_int INTEGER,      -- –¥–Ω—ñ–≤ –º—ñ–∂ –ø–æ–ª–∏–≤–∞–º–∏
      feed_int INTEGER,       -- –¥–Ω—ñ–≤ –º—ñ–∂ –ø—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è–º–∏ (NULL —è–∫—â–æ –Ω–µ —Ç—Ä–µ–±–∞)
      mist_int INTEGER,       -- –¥–Ω—ñ–≤ –º—ñ–∂ –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è–º–∏ (NULL —è–∫—â–æ –Ω–µ —Ç—Ä–µ–±–∞)
      last_watered TEXT,      -- ISO –¥–∞—Ç–∞
      last_fed TEXT,
      last_misted TEXT
    );
    """)
    return c

def seed_if_empty():
    c = db()
    n = c.execute("SELECT COUNT(*) FROM plants").fetchone()[0]
    if n == 0:
        rows = [
            ("–î—Ä–∞—Ü–µ–Ω–∞",
             "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ –∞–±–æ –ø—ñ–≤—Ç—ñ–Ω—å; –ª–µ–≥–∫–µ –≤–µ—á—ñ—Ä–Ω—î —Å–æ–Ω—Ü–µ –æ–∫.\n"
             "–ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—ñ–¥—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º –∑–≤–µ—Ä—Ö—É.\n"
             "–ü—ñ—Å–ª—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏: 2‚Äì3 —Ç–∏–∂–Ω—ñ –±–µ–∑ –¥–æ–±—Ä–∏–≤; —Å–ª—ñ–¥–∫—É–π –∑–∞ –¥—Ä–µ–Ω–∞–∂–µ–º.\n"
             "–î–æ–≥–ª—è–¥: –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è/–ø—Ä–æ—Ç–∏—Ä–∞–Ω–Ω—è –ª–∏—Å—Ç—è.",
             None, 14, None, 7, iso_today(), None, iso_today()),
            ("–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω",
             "–°–≤—ñ—Ç–ª–æ: –¥—É–∂–µ —è—Å–∫—Ä–∞–≤–µ, 4‚Äì6 –≥–æ–¥ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ.\n"
             "–ü–æ–ª–∏–≤: –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç, –±–µ–∑ –∑–∞—Å—Ç–æ—é (–≤–ª—ñ—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 2‚Äì3 –¥–Ω—ñ).\n"
             "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ü–∏—Ç—Ä—É—Å-—Ä–∞–∑ –Ω–∞ 14 –¥–Ω—ñ–≤.",
             None, 3, 14, 7, iso_today(), iso_today(), iso_today()),
            ("–•–∞–º–∞–µ–¥–æ—Ä–µ—è",
             "–°–≤—ñ—Ç–ª–æ: —Ä–æ–∑—Å—ñ—è–Ω–µ, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ —Å–æ–Ω—Ü—è.\n"
             "–ü–æ–ª–∏–≤: —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç (–±–µ–∑ –∑–∞—Å—Ç–æ—é).\n"
             "–î–æ–≥–ª—è–¥: —Ä–µ–≥—É–ª—è—Ä–Ω–µ –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è.",
             None, 5, 30, 3, iso_today(), iso_today(), iso_today()),
            ("–ó–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å",
             "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ/–ø—ñ–≤—Ç—ñ–Ω—å; –≤–µ—á—ñ—Ä–Ω—î —Å–æ–Ω—Ü–µ –¥–æ–ø—É—Å—Ç–∏–º–µ.\n"
             "–ü–æ–ª–∏–≤: —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è “ë—Ä—É–Ω—Ç—É (~10‚Äì14 –¥–Ω—ñ–≤ –≤–ª—ñ—Ç–∫—É).\n"
             "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Å–ª–∞–±–∫–∏–º –¥–æ–±—Ä–∏–≤–æ–º —Ä–∞–∑ –Ω–∞ 4‚Äì6 —Ç–∏–∂–Ω—ñ–≤.\n"
             "–ü—Ä–∏–º—ñ—Ç–∫–∞: –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—Ç–∏ –ø—ñ–¥ —á–∞—Å —Ä–æ—Å—Ç—É –Ω–æ–≤–æ–≥–æ –ø–∞–≥–æ–Ω–∞.",
             None, 14, 42, None, iso_today(), iso_today(), None),
            ("–°–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º",
             "–°–≤—ñ—Ç–ª–æ: –ø—ñ–≤—Ç—ñ–Ω—å/—Ä–æ–∑—Å—ñ—è–Ω–µ; –ø—Ä—è–º–µ —Å–æ–Ω—Ü–µ —É–Ω–∏–∫–∞—Ç–∏.\n"
             "–ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π (–≤–ª—ñ—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 3‚Äì4 –¥–Ω—ñ).\n"
             "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ.\n"
             "–î–æ–≥–ª—è–¥: –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª–∏—Å—Ç—è.",
             None, 4, 14, 3, iso_today(), iso_today(), iso_today()),
        ]
        c.executemany("""INSERT INTO plants
            (name, care, photo, water_int, feed_int, mist_int, last_watered, last_fed, last_misted)
            VALUES(?,?,?,?,?,?,?,?,?)""", rows)
        c.commit()
    c.close()

def iso_today():
    return dt.date.today().isoformat()

seed_if_empty()

# ====== CARE + INTERVALS (–º–∞–ø–∞ –∑–∞ –≤–∏–¥–∞–º–∏) ======
def care_and_intervals_for(name: str):
    n = name.lower()
    # –∑–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å
    if any(k in n for k in ["zamioculcas", "zz", "–∑–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å"]):
        return ( "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ/–ø—ñ–≤—Ç—ñ–Ω—å; –≤–µ—á—ñ—Ä–Ω—î —Å–æ–Ω—Ü–µ –¥–æ–ø—É—Å—Ç–∏–º–µ.\n"
                 "–ü–æ–ª–∏–≤: —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è “ë—Ä—É–Ω—Ç—É (~10‚Äì14 –¥–Ω—ñ–≤ –≤–ª—ñ—Ç–∫—É).\n"
                 "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Å–ª–∞–±–∫–∏–º –¥–æ–±—Ä–∏–≤–æ–º —Ä–∞–∑ –Ω–∞ 4‚Äì6 —Ç–∏–∂–Ω—ñ–≤.\n"
                 "–ü—Ä–∏–º—ñ—Ç–∫–∞: –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—Ç–∏ –ø—ñ–¥ —á–∞—Å —Ä–æ—Å—Ç—É –Ω–æ–≤–æ–≥–æ –ø–∞–≥–æ–Ω–∞.",
                 14, 42, None )
    # –¥—Ä–∞—Ü–µ–Ω–∞
    if any(k in n for k in ["dracaena", "–¥—Ä–∞—Ü–µ–Ω–∞"]):
        return ( "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ –∞–±–æ –ø—ñ–≤—Ç—ñ–Ω—å; –ª–µ–≥–∫–µ –≤–µ—á—ñ—Ä–Ω—î —Å–æ–Ω—Ü–µ –æ–∫.\n"
                 "–ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—ñ–¥—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º –∑–≤–µ—Ä—Ö—É.\n"
                 "–ü—ñ—Å–ª—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏: 2‚Äì3 —Ç–∏–∂–Ω—ñ –±–µ–∑ –¥–æ–±—Ä–∏–≤; —Å–ª—ñ–¥–∫—É–π –∑–∞ –¥—Ä–µ–Ω–∞–∂–µ–º.\n"
                 "–î–æ–≥–ª—è–¥: –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è/–ø—Ä–æ—Ç–∏—Ä–∞–Ω–Ω—è –ª–∏—Å—Ç—è.",
                 14, None, 7 )
    # —Ö–∞–º–∞–µ–¥–æ—Ä–µ—è
    if any(k in n for k in ["chamaedorea", "parlor palm", "—Ö–∞–º–∞–µ–¥–æ—Ä–µ—è"]):
        return ( "–°–≤—ñ—Ç–ª–æ: —Ä–æ–∑—Å—ñ—è–Ω–µ, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ —Å–æ–Ω—Ü—è.\n"
                 "–ü–æ–ª–∏–≤: —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç (–±–µ–∑ –∑–∞—Å—Ç–æ—é).\n"
                 "–î–æ–≥–ª—è–¥: —Ä–µ–≥—É–ª—è—Ä–Ω–µ –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è.",
                 5, 30, 3 )
    # —Å–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º
    if any(k in n for k in ["spathiphyllum", "peace lily", "—Å–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º"]):
        return ( "–°–≤—ñ—Ç–ª–æ: –ø—ñ–≤—Ç—ñ–Ω—å/—Ä–æ–∑—Å—ñ—è–Ω–µ; –ø—Ä—è–º–µ —Å–æ–Ω—Ü–µ —É–Ω–∏–∫–∞—Ç–∏.\n"
                 "–ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π (–≤–ª—ñ—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 3‚Äì4 –¥–Ω—ñ).\n"
                 "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ.\n"
                 "–î–æ–≥–ª—è–¥: –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –ª–∏—Å—Ç—è.",
                 4, 14, 3 )
    # –∫–∞–ª–∞–º–æ–Ω–¥–∏–Ω/—Ü–∏—Ç—Ä—É—Å
    if any(k in n for k in ["calamondin", "citrus √ó microcarpa", "citrofortunella", "–∫–∞–ª–∞–º–æ–Ω–¥–∏–Ω", "citrus"]):
        return ( "–°–≤—ñ—Ç–ª–æ: –¥—É–∂–µ —è—Å–∫—Ä–∞–≤–µ, 4‚Äì6 –≥–æ–¥ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ.\n"
                 "–ü–æ–ª–∏–≤: –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç, –±–µ–∑ –∑–∞—Å—Ç–æ—é; –≤–ª—ñ—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è–π —á–∞—Å—Ç—ñ—à–µ.\n"
                 "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ü–∏—Ç—Ä—É—Å-—Ä–∞–∑ –Ω–∞ 14 –¥–Ω—ñ–≤.\n"
                 "–î–æ–≥–ª—è–¥: –ø—Ä–æ–≤—ñ—Ç—Ä—é–≤–∞–Ω–Ω—è; –æ–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è –ª–∏—Å—Ç—è –≤ —Å–ø–µ–∫—É.",
                 3, 14, 7 )
    # –∞–≤–æ–∫–∞–¥–æ (—á–∞—Å—Ç–æ –¥–æ–¥–∞—é—Ç—å)
    if any(k in n for k in ["avocado", "persea americana", "–∞–≤–æ–∫–∞–¥–æ"]):
        return ( "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ, –±–µ–∑ –∂–æ—Ä—Å—Ç–∫–æ–≥–æ –ø–æ–ª—É–¥–µ–Ω–Ω–æ–≥–æ.\n"
                 "–ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º –∑–≤–µ—Ä—Ö—É.\n"
                 "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 3‚Äì4 —Ç–∏–∂–Ω—ñ —É –ø–µ—Ä—ñ–æ–¥ —Ä–æ—Å—Ç—É.",
                 6, 28, None )
    # –¥–µ—Ñ–æ–ª—Ç (–∞–∫—É—Ä–∞—Ç–Ω–∏–π)
    return ( "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ.\n"
             "–ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É “ë—Ä—É–Ω—Ç—É.\n"
             "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: –∑–∞ —Å–µ–∑–æ–Ω–æ–º (–∫–æ–∂–Ω—ñ 3‚Äì4 —Ç–∏–∂–Ω—ñ —É –ø–µ—Ä—ñ–æ–¥ —Ä–æ—Å—Ç—É).",
             7, 28, None )

# ====== Plant.id: –Ω–∞–∑–≤–∞ + similar image (–∑–∞ —Ñ–æ—Ç–æ) ======
def plantid_name_and_image(image_bytes: bytes):
    if not PLANT_ID_API_KEY:
        return (None, None)
    try:
        url = "https://api.plant.id/v2/identify"
        headers = {"Api-Key": PLANT_ID_API_KEY}
        files = {"images": image_bytes}
        data = {
            "modifiers": ["crops_fast", "similar_images"],
            "plant_language": "en",
            "plant_details": ["common_names", "url", "wiki_description"]
        }
        r = requests.post(url, headers=headers, files=files, data={"data": json.dumps(data)}, timeout=45).json()
        sug = (r.get("suggestions") or [])
        if not sug: return (None, None)
        name = sug[0].get("plant_name") or (sug[0].get("plant_details",{}).get("common_names") or [None])[0]
        sim = (sug[0].get("similar_images") or [])
        img = requests.get(sim[0]["url"], timeout=25).content if sim else None
        return (name, img)
    except Exception:
        return (None, None)

# ====== UI ======
def main_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåø –ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏", callback_data="my_plants")],
        [InlineKeyboardButton("üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="week_plan")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω—É", callback_data="add_plant"),
         InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_plant")],
    ])

def plants_list_kb():
    c = db()
    rows = c.execute("SELECT id, name FROM plants ORDER BY name").fetchall()
    c.close()
    btns = [[InlineKeyboardButton(name, callback_data=f"plant_{pid}")] for (pid, name) in rows]
    btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
    return InlineKeyboardMarkup(btns)

def plant_card_kb(pid:int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìã –î–æ–≥–ª—è–¥", callback_data=f"care_{pid}")],
        [InlineKeyboardButton("üì∑ –î–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"addphoto_{pid}")],
        [InlineKeyboardButton("üîé –§–æ—Ç–æ –∑ Plant.id", callback_data=f"plantidphoto_{pid}")],
        [InlineKeyboardButton("‚úÖ –ü–æ–ª–∏–≤ –∑—Ä–æ–±–ª–µ–Ω–æ", callback_data=f"done_water_{pid}")],
        [InlineKeyboardButton("‚úÖ –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–æ", callback_data=f"done_feed_{pid}")],
        [InlineKeyboardButton("‚úÖ –û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è –∑—Ä–æ–±–ª–µ–Ω–æ", callback_data=f"done_mist_{pid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="my_plants")]
    ])

# ====== STATES ======
SELECT_ADD_MODE, ADD_NAME, ADD_PHOTO_NEW, ADD_PHOTO_EXIST, ADD_PHOTO_PLANTID = range(5)

# ====== HELPERS ======
def today(): return dt.date.today()
def add_days(d, n): return d + dt.timedelta(days=n)

def next_due(last_iso, interval):
    if not interval: return None
    base = dt.date.fromisoformat(last_iso) if last_iso else today()
    return add_days(base, interval)

def week_schedule():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ —É–ø–µ—Ä–µ–¥, –∑–≥—Ä—É–ø–æ–≤–∞–Ω—ñ –ø–æ –¥–∞—Ç–∞—Ö."""
    c = db()
    rows = c.execute("""SELECT id,name,water_int,feed_int,mist_int,last_watered,last_fed,last_misted
                        FROM plants""").fetchall()
    c.close()
    events = {}
    for pid,name,wi,fi,mi,lw,lf,lm in rows:
        w = next_due(lw, wi) if wi else None
        f = next_due(lf, fi) if fi else None
        m = next_due(lm, mi) if mi else None
        for when, kind in [(w,"–ü–æ–ª–∏–≤"), (f,"–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è"), (m,"–û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è")]:
            if when and 0 <= (when - today()).days <= 7:
                events.setdefault(when, {}).setdefault(kind, []).append(name)
    if not events:
        return "–ù–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–≤–¥–∞–Ω—å –Ω–µ–º–∞—î ‚Äî –≤—Å–µ –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚ú®"
    lines = []
    for day in sorted(events.keys()):
        head = day.strftime("%d %B (%a)")
        lines.append(f"‚Ä¢ {head}")
        for kind, names in events[day].items():
            lines.append(f"  ‚Äì {kind}: {', '.join(sorted(names))}")
    return "üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n" + "\n".join(lines)

# ====== HANDLERS ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–æ–≥–ª—è–¥—É –∑–∞ —Ä–æ—Å–ª–∏–Ω–∞–º–∏ üå±", reply_markup=main_kb())

async def router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; data = q.data
    await q.answer()

    if data == "my_plants":
        await q.message.reply_text("–¢–≤–æ—ó —Ä–æ—Å–ª–∏–Ω–∏:", reply_markup=plants_list_kb())
        return

    if data == "week_plan":
        await q.message.reply_text(week_schedule(), reply_markup=main_kb())
        return

    if data.startswith("plant_"):
        pid = int(data.split("_")[1])
        c = db()
        row = c.execute("SELECT name, care, photo FROM plants WHERE id=?", (pid,)).fetchone()
        c.close()
        if not row:
            await q.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ü—é —Ä–æ—Å–ª–∏–Ω—É ü§î", reply_markup=plants_list_kb()); return
        name, care, photo = row
        caption = f"*{name}*\n{care}"
        if photo:
            await q.message.reply_photo(photo=photo, caption=caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
        else:
            await q.message.reply_text(caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
        return

    if data.startswith("care_"):
        pid = int(data.split("_")[1])
        c = db()
        name = c.execute("SELECT name FROM plants WHERE id=?", (pid,)).fetchone()[0]
        c.close()
        await q.message.reply_text(care_and_intervals_for(name)[0], reply_markup=plant_card_kb(pid))
        return

    if data == "delete_plant":
        c = db()
        rows = c.execute("SELECT id,name FROM plants ORDER BY name").fetchall()
        c.close()
        btns = [[InlineKeyboardButton(f"üóë {nm}", callback_data=f"del_{pid}")] for pid,nm in rows]
        btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
        await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ—Å–ª–∏–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(btns))
        return

    if data.startswith("del_"):
        pid = int(data.split("_")[1])
        c = db(); c.execute("DELETE FROM plants WHERE id=?", (pid,)); c.commit(); c.close()
        await q.message.reply_text("–í–∏–¥–∞–ª–∏–≤ ‚úÖ", reply_markup=plants_list_kb()); return

    if data == "add_plant":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –≤—Ä—É—á–Ω—É", callback_data="mode_name")],
            [InlineKeyboardButton("–§–æ—Ç–æ (–∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è)", callback_data="mode_photo")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")]
        ])
        await q.message.reply_text("–Ø–∫ –¥–æ–¥–∞–º–æ —Ä–æ—Å–ª–∏–Ω—É?", reply_markup=kb)
        return SELECT_ADD_MODE

    if data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())
        return

    # –≤—ñ–¥–º—ñ—Ç–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    if any(data.startswith(p) for p in ["done_water_", "done_feed_", "done_mist_"]):
        pid = int(data.split("_")[2])
        field = "last_watered" if "water" in data else "last_fed" if "feed" in data else "last_misted"
        c = db(); c.execute(f"UPDATE plants SET {field}=? WHERE id=?", (iso_today(), pid)); c.commit(); c.close()
        await q.message.reply_text("–ó–∞–ø–∏—Å–∞–≤ ‚úÖ", reply_markup=plant_card_kb(pid))
        return

    # —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É
    if data.startswith("addphoto_"):
        pid = int(data.split("_")[1]); context.user_data["target_pid"] = pid
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ —Ü—ñ—î—ó —Ä–æ—Å–ª–∏–Ω–∏ (jpg/png).")
        return ADD_PHOTO_EXIST

    # —Ñ–æ—Ç–æ –∑ Plant.id
    if data.startswith("plantidphoto_"):
        pid = int(data.split("_")[1]); context.user_data["target_pid_pid"] = pid
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ü—ñ—î—ó —Ä–æ—Å–ª–∏–Ω–∏ ‚Äî –ø—ñ–¥—Ç—è–≥–Ω—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Plant.id.")
        return ADD_PHOTO_PLANTID

# ---- ADD FLOW (–Ω–∞–∑–≤–∞ / —Ñ–æ—Ç–æ) ----
async def add_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; data = q.data
    await q.answer()
    if data == "mode_name":
        await q.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        return ADD_NAME
    if data == "mode_photo":
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
        return ADD_PHOTO_NEW
    if data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())
        return ConversationHandler.END

async def on_add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."); return ADD_NAME
    care, wi, fi, mi = care_and_intervals_for(name)
    c = db()
    c.execute("""INSERT INTO plants(name, care, photo, water_int, feed_int, mist_int,
                last_watered, last_fed, last_misted)
                VALUES(?,?,?,?,?,?,?,?,?)""",
              (name, care, None, wi, fi, mi, iso_today(), iso_today(), iso_today()))
    c.commit(); c.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{name}¬ª ‚úÖ\n–†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_kb())
    return ConversationHandler.END

async def on_add_photo_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."); return ADD_PHOTO_NEW
    file = await update.message.photo[-1].get_file()
    img = await file.download_as_bytearray()
    name, ref_img = plantid_name_and_image(bytes(img))
    name = name or "–ù–æ–≤–∞ —Ä–æ—Å–ª–∏–Ω–∞"
    care, wi, fi, mi = care_and_intervals_for(name)
    photo = ref_img or bytes(img)
    c = db()
    c.execute("""INSERT INTO plants(name, care, photo, water_int, feed_int, mist_int,
                last_watered, last_fed, last_misted)
                VALUES(?,?,?,?,?,?,?,?,?)""",
              (name, care, photo, wi, fi, mi, iso_today(), iso_today(), iso_today()))
    c.commit(); c.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{name}¬ª ‚úÖ\n–†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_kb())
    return ConversationHandler.END

# ---- UPDATE PHOTO (manual) ----
async def on_add_photo_exist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."); return ADD_PHOTO_EXIST
    pid = context.user_data.get("target_pid")
    file = await update.message.photo[-1].get_file()
    img = await file.download_as_bytearray()
    c = db(); c.execute("UPDATE plants SET photo=? WHERE id=?", (bytes(img), pid)); c.commit(); c.close()
    await update.message.reply_text("–§–æ—Ç–æ –æ–Ω–æ–≤–∏–≤ ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

# ---- UPDATE PHOTO via Plant.id ----
async def on_add_photo_plantid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."); return ADD_PHOTO_PLANTID
    if not PLANT_ID_API_KEY:
        await update.message.reply_text("PLANT_ID_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É Variables."); return ConversationHandler.END
    pid = context.user_data.get("target_pid_pid")
    file = await update.message.photo[-1].get_file()
    img = await file.download_as_bytearray()
    _, ref_img = plantid_name_and_image(bytes(img))
    if not ref_img:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç—è–≥–Ω—É—Ç–∏ —Ñ–æ—Ç–æ –∑ Plant.id. –ó–∞–ª–∏—à–∞—é –±–µ–∑ –∑–º—ñ–Ω.")
        return ConversationHandler.END
    c = db(); c.execute("UPDATE plants SET photo=? WHERE id=?", (ref_img, pid)); c.commit(); c.close()
    await update.message.reply_text("–ó–∞–º—ñ–Ω–µ–Ω–æ —Ñ–æ—Ç–æ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Plant.id ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb())
    return ConversationHandler.END

# ====== BOOTSTRAP ======
def build_app():
    app = ApplicationBuilder().token(TOKEN).build()

    add_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_choose, pattern="^(mode_name|mode_photo|back_home)$")],
        states={
            SELECT_ADD_MODE: [CallbackQueryHandler(add_choose, pattern="^(mode_name|mode_photo|back_home)$")],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_add_name)],
            ADD_PHOTO_NEW: [MessageHandler(filters.PHOTO, on_add_photo_new)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )

    upd_photo_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(router, pattern=r"^addphoto_\d+$")],
        states={ ADD_PHOTO_EXIST: [MessageHandler(filters.PHOTO, on_add_photo_exist)] },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    plantid_photo_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(router, pattern=r"^plantidphoto_\d+$")],
        states={ ADD_PHOTO_PLANTID: [MessageHandler(filters.PHOTO, on_add_photo_plantid)] },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(add_conv)
    app.add_handler(upd_photo_conv)
    app.add_handler(plantid_photo_conv)
    app.add_handler(CallbackQueryHandler(router))  # –∑–∞–≥–∞–ª—å–Ω–∏–π –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ

    return app

if __name__ == "__main__":
    # —Å—Ç–∞—Ä—Ç–æ–≤–∏–π –ø—ñ–Ω–≥ (—â–æ–± –±–∞—á–∏—Ç–∏, —â–æ –±–æ—Ç –∂–∏–≤–∏–π)
    try:
        requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                      json={"chat_id": os.environ.get("TELEGRAM_CHAT_ID"),
                            "text": "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å¬ª –∞–±–æ ¬´üåø –ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏¬ª"},
                      timeout=10)
    except Exception:
        pass

    build_app().run_polling(allowed_updates=Update.ALL_TYPES)
