import os, io, json, requests, sqlite3, datetime as dt
from PIL import Image
from zoneinfo import ZoneInfo
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ConversationHandler
)

# ===== CONFIG =====
TOKEN = os.environ["TELEGRAM_TOKEN"]
OWM_KEY = os.environ.get("OPENWEATHER_API_KEY", "")
PLANT_ID_API_KEY = os.environ.get("PLANT_ID_API_KEY", "")   # <- –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
CITY = "Kyiv"
TZ = ZoneInfo("Europe/Kyiv")
DB_PATH = "plants.db"

# ===== DB =====
def db():
    conn = sqlite3.connect(DB_PATH)
    conn.execute("""
    CREATE TABLE IF NOT EXISTS plants(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        care TEXT NOT NULL,
        photo BLOB
    );
    """)
    return conn

def seed_if_empty():
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT COUNT(*) FROM plants;")
    if cur.fetchone()[0] == 0:
        plants = [
            ("–î—Ä–∞—Ü–µ–Ω–∞", "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º. –ü—ñ—Å–ª—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏ ‚Äî –±–µ–∑ –¥–æ–±—Ä–∏–≤ 2‚Äì3 —Ç–∏–∂–Ω—ñ.", None),
            ("–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω", "–°–≤—ñ—Ç–ª–æ: –¥—É–∂–µ —è—Å–∫—Ä–∞–≤–µ, —Ç—Ä–æ—Ö–∏ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ —Å–æ–Ω—Ü—è –∑–±–æ–∫—É –≤—ñ–¥ –≤—ñ–∫–Ω–∞. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 2‚Äì3 –¥–Ω—ñ –≤–ª—ñ—Ç–∫—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ —Ü–∏—Ç—Ä—É—Å.", None),
            ("–•–∞–º–∞–µ–¥–æ—Ä–µ—è", "–°–≤—ñ—Ç–ª–æ: —Ä–æ–∑—Å—ñ—è–Ω–µ, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ. –ü–æ–ª–∏–≤: —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç. –û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è.", None),
            ("–ó–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å", "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ/–ø—ñ–≤—Ç—ñ–Ω—å. –ü–æ–ª–∏–≤: —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è (10‚Äì14 –¥–Ω—ñ–≤ –≤–ª—ñ—Ç–∫—É). –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Å–ª–∞–±–∫–µ —Ä–∞–∑ –Ω–∞ 4‚Äì6 —Ç–∏–∂–Ω—ñ–≤.", None),
            ("–°–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º", "–°–≤—ñ—Ç–ª–æ: –ø—ñ–≤—Ç—ñ–Ω—å/—Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 3‚Äì4 –¥–Ω—ñ –≤–ª—ñ—Ç–∫—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ.", None),
        ]
        conn.executemany("INSERT INTO plants(name, care, photo) VALUES(?,?,?);", plants)
        conn.commit()
    conn.close()

seed_if_empty()

# ===== WEATHER + PLAN (–∫–æ—Ä–æ—Ç–∫–æ, –∑–∞–ª–∏—à–∏–ª–∏ –Ω–∞ –º–∞–π–±—É—Ç–Ω—ñ –∞–≤—Ç–æ-–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è) =====
def get_weather():
    if not OWM_KEY: return None
    try:
        url = f"https://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={OWM_KEY}&units=metric&lang=ua"
        r = requests.get(url, timeout=15).json()
        return round(r["main"]["temp"]), r["weather"][0]["description"], r["main"]["humidity"]
    except Exception:
        return None

# ===== UI HELPERS =====
def main_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåø –ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏", callback_data="my_plants")],
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω—É", callback_data="add_plant"),
            InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_plant")
        ],
    ])

def plants_list_kb():
    conn = db()
    rows = conn.execute("SELECT id, name FROM plants ORDER BY name;").fetchall()
    conn.close()
    buttons = [[InlineKeyboardButton(name, callback_data=f"plant_{pid}")] for (pid, name) in rows]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
    return InlineKeyboardMarkup(buttons)

# ===== RECOGNITION =====
def recognize_plant_by_photo(image_bytes: bytes) -> str | None:
    """
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Plant.id API (–æ–ø—Ü—ñ–π–Ω–æ). –Ø–∫—â–æ –∫–ª—é—á–∞ –Ω–µ–º–∞—î ‚Äì –≤–µ—Ä—Ç–∞—î–º–æ None.
    """
    if not PLANT_ID_API_KEY:
        return None
    try:
        # —ó—Ö–Ω—ñ–π v3/v2 –µ–Ω–¥–ø–æ—ñ–Ω—Ç ‚Äì –ø—Ä–∏–∫–ª–∞–¥ payload
        url = "https://api.plant.id/v2/identify"
        files = {"images": image_bytes}
        data = {
            "modifiers": ["crops_fast", "similar_images"],
            "plant_language": "uk",
            "plant_details": ["common_names", "url", "waterings", "wiki_description"]
        }
        headers = {"Api-Key": PLANT_ID_API_KEY}
        resp = requests.post(url, headers=headers, files=files, data={"data": json.dumps(data)}, timeout=30)
        j = resp.json()
        suggestions = j.get("suggestions", [])
        if not suggestions: return None
        # –±–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –Ω–∞–∑–≤—É
        name = suggestions[0].get("plant_name") or suggestions[0].get("plant_details", {}).get("common_names", [None])[0]
        return name
    except Exception:
        return None

# ===== CONVERSATIONS =====
(
    ADD_CHOOSE, ADD_NAME, ADD_PHOTO,
    DEL_CHOOSE
) = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–æ–≥–ª—è–¥—É –∑–∞ —Ä–æ—Å–ª–∏–Ω–∞–º–∏ üå±", reply_markup=main_kb())

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()
    if data == "my_plants":
        await q.edit_message_text("–¢–≤–æ—ó —Ä–æ—Å–ª–∏–Ω–∏:", reply_markup=plants_list_kb())
    elif data.startswith("plant_"):
        pid = int(data.split("_")[1])
        conn = db()
        row = conn.execute("SELECT name, care, photo FROM plants WHERE id=?;", (pid,)).fetchone()
        conn.close()
        if not row:
            await q.edit_message_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ü—é —Ä–æ—Å–ª–∏–Ω—É ü§î", reply_markup=plants_list_kb())
            return
        name, care, photo = row
        caption = f"**{name}**\n{care}"
        if photo:
            await q.message.reply_photo(photo=photo, caption=caption, parse_mode="Markdown")
        else:
            await q.message.reply_text(caption, parse_mode="Markdown")
    elif data == "add_plant":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –≤—Ä—É—á–Ω—É", callback_data="add_name")],
            [InlineKeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–æ—Ç–æ (–∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è)", callback_data="add_photo")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")]
        ])
        await q.edit_message_text("–Ø–∫ –¥–æ–¥–∞–º–æ —Ä–æ—Å–ª–∏–Ω—É?", reply_markup=kb)
    elif data == "delete_plant":
        # –ø–æ–∫–∞–∂–µ–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        conn = db()
        rows = conn.execute("SELECT id, name FROM plants ORDER BY name;").fetchall()
        conn.close()
        buttons = [[InlineKeyboardButton(f"üóë {name}", callback_data=f"del_{pid}")] for (pid, name) in rows]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
        await q.edit_message_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ—Å–ª–∏–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(buttons))
    elif data.startswith("del_"):
        pid = int(data.split("_")[1])
        conn = db()
        conn.execute("DELETE FROM plants WHERE id=?;", (pid,))
        conn.commit()
        conn.close()
        await q.edit_message_text("–ì–æ—Ç–æ–≤–æ. –í–∏–¥–∞–ª–∏–≤ ‚úÖ", reply_markup=plants_list_kb())
    elif data == "add_name":
        await q.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        return ADD_NAME
    elif data == "add_photo":
        await q.edit_message_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (–æ–¥–Ω–µ —Ñ–æ—Ç–æ).")
        return ADD_PHOTO
    elif data == "back_home":
        await q.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if not name:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ADD_NAME
    # –±–∞–∑–æ–≤–∏–π —à–∞–±–ª–æ–Ω –¥–æ–≥–ª—è–¥—É; –º–æ–∂–Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    care = "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: –∑–∞ —Å–µ–∑–æ–Ω–æ–º."
    conn = db()
    conn.execute("INSERT INTO plants(name, care, photo) VALUES(?,?,?);", (name, care, None))
    conn.commit(); conn.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{name}¬ª ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –≥–∞–ª–µ—Ä–µ—ó/–∫–∞–º–µ—Ä–∏.")
        return ADD_PHOTO
    file = await update.message.photo[-1].get_file()
    img_bytes = await file.download_as_bytearray()
    # –∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (—è–∫—â–æ —î –∫–ª—é—á)
    guessed = recognize_plant_by_photo(bytes(img_bytes))
    guessed_name = guessed or "–ù–æ–≤–∞ —Ä–æ—Å–ª–∏–Ω–∞"
    care = "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: –∑–∞ —Å–µ–∑–æ–Ω–æ–º."
    conn = db()
    conn.execute("INSERT INTO plants(name, care, photo) VALUES(?,?,?);", (guessed_name, care, bytes(img_bytes)))
    conn.commit(); conn.close()
    msg = f"–î–æ–¥–∞–≤ ¬´{guessed_name}¬ª ‚úÖ"
    if not guessed:
        msg += "\n(–ê–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –∞–±–æ –Ω–µ –≤–ø—ñ–∑–Ω–∞–ª–æ ‚Äî –º–æ–∂–Ω–∞ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—ñ–∑–Ω—ñ—à–µ)"
    await update.message.reply_text(msg, reply_markup=main_kb())
    return ConversationHandler.END

# Fallbacks / cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb())
    return ConversationHandler.END

# ===== ENTRY =====
def app():
    application = ApplicationBuilder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_button, pattern="^(add_name|add_photo)$")],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_PHOTO:[MessageHandler(filters.PHOTO, add_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )
    # –ì–æ–ª–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(on_button))
    application.add_handler(conv)
    return application

if __name__ == "__main__":
    # –º–∏—Ç—Ç—î–≤–∏–π –ø—ñ–Ω–≥, —â–æ–± –±–∞—á–∏—Ç–∏ —â–æ –±–æ—Ç –∂–∏–≤–∏–π
    try:
        requests.post(
            f"https://api.telegram.org/bot{TOKEN}/sendMessage",
            json={"chat_id": os.environ.get("TELEGRAM_CHAT_ID"), "text": "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏¬ª ‚Üì"},
            timeout=10
        )
    except Exception:
        pass
    app().run_polling(allowed_updates=Update.ALL_TYPES)
