# bot.py
import os, io, json, requests, sqlite3, datetime as dt
from PIL import Image
from zoneinfo import ZoneInfo
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ConversationHandler
)

# ---------- CONFIG ----------
TOKEN = os.environ["TELEGRAM_TOKEN"]
OWM_KEY = os.environ.get("OPENWEATHER_API_KEY", "")
PLANT_ID_API_KEY = os.environ.get("PLANT_ID_API_KEY", "")  # –æ–ø—Ü. –¥–ª—è –∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
CITY = "Kyiv"
TZ = ZoneInfo("Europe/Kyiv")
DB_PATH = "plants.db"
WIKI_LANG = os.environ.get("WIKIMEDIA_LANG", "uk")  # –º–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–∫—ñ

# ---------- DB ----------
def conn_db():
    c = sqlite3.connect(DB_PATH)
    c.execute("""
    CREATE TABLE IF NOT EXISTS plants(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        care TEXT NOT NULL,
        photo BLOB
    );
    """)
    return c

def seed_if_empty():
    c = conn_db()
    cur = c.cursor()
    cur.execute("SELECT COUNT(*) FROM plants;")
    if cur.fetchone()[0] == 0:
        plants = [
            ("–î—Ä–∞—Ü–µ–Ω–∞",
             "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º. –ü—ñ—Å–ª—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏ ‚Äî –±–µ–∑ –¥–æ–±—Ä–∏–≤ 2‚Äì3 —Ç–∏–∂–Ω—ñ.",
             None),
            ("–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω",
             "–°–≤—ñ—Ç–ª–æ: –¥—É–∂–µ —è—Å–∫—Ä–∞–≤–µ, —Ç—Ä–æ—Ö–∏ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ —Å–æ–Ω—Ü—è –∑–±–æ–∫—É –≤—ñ–¥ –≤—ñ–∫–Ω–∞. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 2‚Äì3 –¥–Ω—ñ –≤–ª—ñ—Ç–∫—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ —Ü–∏—Ç—Ä—É—Å.",
             None),
            ("–•–∞–º–∞–µ–¥–æ—Ä–µ—è",
             "–°–≤—ñ—Ç–ª–æ: —Ä–æ–∑—Å—ñ—è–Ω–µ, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ. –ü–æ–ª–∏–≤: —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç. –û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è.",
             None),
            ("–ó–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å",
             "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ/–ø—ñ–≤—Ç—ñ–Ω—å. –ü–æ–ª–∏–≤: –ª–∏—à–µ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è (10‚Äì14 –¥–Ω—ñ–≤ –≤–ª—ñ—Ç–∫—É). –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Å–ª–∞–±–∫–µ —Ä–∞–∑ –Ω–∞ 4‚Äì6 —Ç–∏–∂–Ω—ñ–≤.",
             None),
            ("–°–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º",
             "–°–≤—ñ—Ç–ª–æ: –ø—ñ–≤—Ç—ñ–Ω—å/—Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 3‚Äì4 –¥–Ω—ñ –≤–ª—ñ—Ç–∫—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ.",
             None),
        ]
        c.executemany("INSERT INTO plants(name, care, photo) VALUES(?,?,?);", plants)
        c.commit()
    c.close()

seed_if_empty()

# ---------- HELPERS: Wikimedia image search ----------
def _download_url_bytes(url: str) -> bytes | None:
    try:
        r = requests.get(url, timeout=20)
        if r.status_code == 200:
            return r.content
    except Exception:
        pass
    return None

def fetch_wikimedia_image(name: str) -> bytes | None:
    """
    –®—É–∫–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Wikimedia (–±–µ–∑ –∫–ª—é—á—ñ–≤).
    1) –ø–æ—à—É–∫ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ –Ω–∞–∑–≤—ñ
    2) –±–µ—Ä–µ–º–æ –ø—Ä–µ–≤‚Äô—é—à–∫—É (thumbnail / original)
    """
    try:
        # 1) search
        srch = requests.get(
            f"https://{WIKI_LANG}.wikipedia.org/w/api.php",
            params={"action":"query","list":"search","srsearch":name,"format":"json","srlimit":1},
            timeout=20
        ).json()
        hits = srch.get("query",{}).get("search",[])
        if not hits: return None
        pageid = hits[0]["pageid"]
        # 2) page image
        info = requests.get(
            f"https://{WIKI_LANG}.wikipedia.org/w/api.php",
            params={
                "action":"query","pageids":pageid,"prop":"pageimages|imageinfo|images",
                "pithumbsize":800,"format":"json"
            }, timeout=20
        ).json()
        pages = info.get("query",{}).get("pages",{})
        page = pages.get(str(pageid))
        thumb = page.get("thumbnail",{}).get("source")
        if thumb:
            return _download_url_bytes(thumb)
    except Exception:
        pass
    return None

# ---------- PLANT.ID (optional for photo-flow) ----------
def plantid_similar_image(image_bytes: bytes) -> bytes | None:
    if not PLANT_ID_API_KEY:  # –Ω–µ–º–∞—î –∫–ª—é—á–∞
        return None
    try:
        url = "https://api.plant.id/v2/identify"
        files = {"images": image_bytes}
        data = {
            "modifiers": ["crops_fast", "similar_images"],
            "plant_language": "uk",
            "plant_details": ["common_names", "wiki_description", "url"]
        }
        headers = {"Api-Key": PLANT_ID_API_KEY}
        resp = requests.post(url, headers=headers, files=files, data={"data": json.dumps(data)}, timeout=40)
        j = resp.json()
        sim = j.get("suggestions",[{}])[0].get("similar_images",[])
        if sim:
            url0 = sim[0].get("url")
            return _download_url_bytes(url0) if url0 else None
    except Exception:
        pass
    return None

# ---------- UI ----------
def main_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåø –ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏", callback_data="my_plants")],
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω—É", callback_data="add_plant"),
            InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_plant")
        ],
    ])

def plants_list_kb():
    c = conn_db()
    rows = c.execute("SELECT id, name FROM plants ORDER BY name;").fetchall()
    c.close()
    buttons = [[InlineKeyboardButton(name, callback_data=f"plant_{pid}")] for (pid, name) in rows]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
    return InlineKeyboardMarkup(buttons)

def plant_card_kb(pid: int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∑ –î–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"addphoto_{pid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="my_plants")]
    ])

def delete_list_kb():
    c = conn_db()
    rows = c.execute("SELECT id, name FROM plants ORDER BY name;").fetchall()
    c.close()
    buttons = [[InlineKeyboardButton(f"üóë {name}", callback_data=f"del_{pid}")] for (pid, name) in rows]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
    return InlineKeyboardMarkup(buttons)

# ---------- CONVERSATION STATES ----------
SELECT_ADD_MODE, ADD_NAME, ADD_PHOTO_NEW, ADD_PHOTO_EXIST = range(4)

# ---------- HANDLERS ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–æ–≥–ª—è–¥—É –∑–∞ —Ä–æ—Å–ª–∏–Ω–∞–º–∏ üå±", reply_markup=main_kb())

async def cb_main_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "my_plants":
        await q.message.reply_text("–¢–≤–æ—ó —Ä–æ—Å–ª–∏–Ω–∏:", reply_markup=plants_list_kb())

    elif data.startswith("plant_"):
        pid = int(data.split("_")[1])
        c = conn_db()
        row = c.execute("SELECT name, care, photo FROM plants WHERE id=?;", (pid,)).fetchone()
        c.close()
        if not row:
            await q.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ü—é —Ä–æ—Å–ª–∏–Ω—É ü§î", reply_markup=plants_list_kb())
            return
        name, care, photo = row
        caption = f"*{name}*\n{care}"
        if photo:
            await q.message.reply_photo(photo=photo, caption=caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
        else:
            await q.message.reply_text(caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))

    elif data == "delete_plant":
        await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ—Å–ª–∏–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=delete_list_kb())

    elif data.startswith("del_"):
        pid = int(data.split("_")[1])
        c = conn_db()
        c.execute("DELETE FROM plants WHERE id=?;", (pid,))
        c.commit(); c.close()
        await q.message.reply_text("–ì–æ—Ç–æ–≤–æ. –í–∏–¥–∞–ª–∏–≤ ‚úÖ", reply_markup=plants_list_kb())

    elif data == "add_plant":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –≤—Ä—É—á–Ω—É", callback_data="mode_name")],
            [InlineKeyboardButton("–§–æ—Ç–æ (–∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è)", callback_data="mode_photo")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")]
        ])
        await q.message.reply_text("–Ø–∫ –¥–æ–¥–∞–º–æ —Ä–æ—Å–ª–∏–Ω—É?", reply_markup=kb)
        return SELECT_ADD_MODE

    elif data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())

    elif data.startswith("addphoto_"):
        pid = int(data.split("_")[1])
        context.user_data["target_pid"] = pid
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ —Ü—ñ—î—ó —Ä–æ—Å–ª–∏–Ω–∏ (jpg/png).")
        return ADD_PHOTO_EXIST

# ----- ADD FLOW (Conversation) -----
async def cb_add_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()

    if data == "mode_name":
        await q.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        return ADD_NAME

    if data == "mode_photo":
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
        return ADD_PHOTO_NEW

    if data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())
        return ConversationHandler.END

async def on_add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return ADD_NAME
    care = "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: –∑–∞ —Å–µ–∑–æ–Ω–æ–º."
    # —Å–ø—Ä–æ–±—É—î–º–æ –æ–¥—Ä–∞–∑—É –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ
    photo_bytes = fetch_wikimedia_image(name)
    c = conn_db()
    c.execute("INSERT INTO plants(name, care, photo) VALUES(?,?,?);", (name, care, photo_bytes))
    c.commit(); c.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{name}¬ª ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

async def on_add_photo_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return ADD_PHOTO_NEW
    file = await update.message.photo[-1].get_file()
    img_bytes = await file.download_as_bytearray()

    # –ø—Ä–æ–±—É—î–º–æ Plant.id similar image
    ref = plantid_similar_image(bytes(img_bytes))
    if ref is None:
        # fallback: —Å–ø—Ä–æ–±—É—î–º–æ –≤–≥–∞–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –≥—Ä—É–±–æ —á–µ—Ä–µ–∑ –≤–∏–∫–∏ (—á–∞—Å—Ç–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞/–ª–∞—Ç–∏–Ω—Å—å–∫–∞ –Ω–∞–∑–≤–∞ –∑–±—ñ–≥–∞—î—Ç—å—Å—è)
        guessed_name = "–ù–æ–≤–∞ —Ä–æ—Å–ª–∏–Ω–∞"
        ref = None
    else:
        guessed_name = "–ù–æ–≤–∞ —Ä–æ—Å–ª–∏–Ω–∞"

    # —è–∫—â–æ —î ref ‚Äì –∑–±–µ—Ä–µ–∂–µ–º–æ –π–æ–≥–æ —è–∫ —Ñ–æ—Ç–æ; —ñ–Ω–∞–∫—à–µ ‚Äî —Ç–≤–æ—î —Ñ–æ—Ç–æ
    photo_bytes = ref or bytes(img_bytes)
    care = "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: –∑–∞ —Å–µ–∑–æ–Ω–æ–º."
    c = conn_db()
    c.execute("INSERT INTO plants(name, care, photo) VALUES(?,?,?);", (guessed_name, care, photo_bytes))
    c.commit(); c.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{guessed_name}¬ª ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

async def on_add_photo_exist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return ADD_PHOTO_EXIST
    pid = context.user_data.get("target_pid")
    if not pid:
        await update.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∑ –∫–∞—Ä—Ç–∫–∏ —Ä–æ—Å–ª–∏–Ω–∏.")
        return ConversationHandler.END
    file = await update.message.photo[-1].get_file()
    img_bytes = await file.download_as_bytearray()
    # –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ Plant.id similar image, –∞–ª–µ —Ç—É—Ç –ª–æ–≥—ñ—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Å–∞–º–µ —Ç–≤–æ—î —Ñ–æ—Ç–æ
    c = conn_db()
    c.execute("UPDATE plants SET photo=? WHERE id=?;", (bytes(img_bytes), pid))
    c.commit(); c.close()
    await update.message.reply_text("–§–æ—Ç–æ –æ–Ω–æ–≤–∏–≤ ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

# Fallbacks
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb())
    return ConversationHandler.END

# ---------- BACKFILL PHOTOS FOR EXISTING ----------
def backfill_missing_photos():
    c = conn_db()
    rows = c.execute("SELECT id, name FROM plants WHERE photo IS NULL;").fetchall()
    updated = 0
    for pid, name in rows:
        img = fetch_wikimedia_image(name)
        if img:
            c.execute("UPDATE plants SET photo=? WHERE id=?;", (img, pid))
            updated += 1
    c.commit(); c.close()
    return updated

# ---------- APP ----------
def app():
    application = ApplicationBuilder().token(TOKEN).build()

    # –æ–∫—Ä–µ–º–∏–π –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    add_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(cb_add_choose, pattern="^(mode_name|mode_photo|back_home)$")],
        states={
            SELECT_ADD_MODE: [CallbackQueryHandler(cb_add_choose, pattern="^(mode_name|mode_photo|back_home)$")],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_add_name)],
            ADD_PHOTO_NEW: [MessageHandler(filters.PHOTO, on_add_photo_new)],
            ADD_PHOTO_EXIST: [MessageHandler(filters.PHOTO, on_add_photo_exist)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )

    # –±–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(add_conv)
    application.add_handler(CallbackQueryHandler(cb_main_router))

    return application

if __name__ == "__main__":
    # –±–µ–∫—Ñ—ñ–ª —Ñ–æ—Ç–æ –¥–ª—è –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö —Ä–æ—Å–ª–∏–Ω (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ/—Ä–µ–¥–µ–ø–ª–æ—é)
    try:
        n = backfill_missing_photos()
        if n:
            requests.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                json={"chat_id": os.environ.get("TELEGRAM_CHAT_ID"), "text": f"üñº –î–æ–¥–∞–≤ —Ñ–æ—Ç–æ –∑ –±–∞–∑–∏ –¥–ª—è {n} —Ä–æ—Å–ª–∏–Ω."},
                timeout=10
            )
    except Exception:
        pass

    # –ø—ñ–Ω–≥, —â–æ –±–æ—Ç –∂–∏–≤–∏–π
    try:
        requests.post(
            f"https://api.telegram.org/bot{TOKEN}/sendMessage",
            json={"chat_id": os.environ.get("TELEGRAM_CHAT_ID"), "text": "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏¬ª ‚Üì"},
            timeout=10
        )
    except Exception:
        pass

    app().run_polling(allowed_updates=Update.ALL_TYPES)
