# bot.py
import os, io, json, requests, sqlite3
from zoneinfo import ZoneInfo
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ConversationHandler
)

# ====== CONFIG ======
TOKEN = os.environ["TELEGRAM_TOKEN"]
OWM_KEY = os.environ.get("OPENWEATHER_API_KEY", "")
PLANT_ID_API_KEY = os.environ.get("PLANT_ID_API_KEY", "")  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
CITY = "Kyiv"
TZ = ZoneInfo("Europe/Kyiv")
DB_PATH = "plants.db"
WIKI_LANG_PRIMARY = os.environ.get("WIKIMEDIA_LANG", "uk")
WIKI_LANG_FALLBACK = "en"

# ====== DB ======
def db():
    c = sqlite3.connect(DB_PATH)
    c.execute("""
    CREATE TABLE IF NOT EXISTS plants(
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL,
      care TEXT NOT NULL,
      photo BLOB
    );""")
    return c

def seed_if_empty():
    c = db()
    n = c.execute("SELECT COUNT(*) FROM plants").fetchone()[0]
    if n == 0:
        rows = [
            ("–î—Ä–∞—Ü–µ–Ω–∞", "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º. –ü—ñ—Å–ª—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏ ‚Äî –±–µ–∑ –¥–æ–±—Ä–∏–≤ 2‚Äì3 —Ç–∏–∂–Ω—ñ.", None),
            ("–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω", "–°–≤—ñ—Ç–ª–æ: –¥—É–∂–µ —è—Å–∫—Ä–∞–≤–µ, —Ç—Ä–æ—Ö–∏ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ —Å–æ–Ω—Ü—è –∑–±–æ–∫—É –≤—ñ–¥ –≤—ñ–∫–Ω–∞. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 2‚Äì3 –¥–Ω—ñ –≤–ª—ñ—Ç–∫—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ —Ü–∏—Ç—Ä—É—Å.", None),
            ("–•–∞–º–∞–µ–¥–æ—Ä–µ—è", "–°–≤—ñ—Ç–ª–æ: —Ä–æ–∑—Å—ñ—è–Ω–µ, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ. –ü–æ–ª–∏–≤: —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç. –û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è.", None),
            ("–ó–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å", "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ/–ø—ñ–≤—Ç—ñ–Ω—å. –ü–æ–ª–∏–≤: —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è (10‚Äì14 –¥–Ω—ñ–≤ –≤–ª—ñ—Ç–∫—É). –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Å–ª–∞–±–∫–µ —Ä–∞–∑ –Ω–∞ 4‚Äì6 —Ç–∏–∂–Ω—ñ–≤.", None),
            ("–°–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º", "–°–≤—ñ—Ç–ª–æ: –ø—ñ–≤—Ç—ñ–Ω—å/—Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π, –ø–µ—Ä–µ–≤—ñ—Ä—è–π –∫–æ–∂–Ω—ñ 3‚Äì4 –¥–Ω—ñ –≤–ª—ñ—Ç–∫—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ.", None)
        ]
        c.executemany("INSERT INTO plants(name, care, photo) VALUES(?,?,?)", rows)
        c.commit()
    c.close()

seed_if_empty()

# ====== CARE TEMPLATES ======
def care_for(name: str) -> str:
    n = name.lower()
    # –º–æ–∂–ª–∏–≤—ñ —Å–∏–Ω–æ–Ω—ñ–º–∏
    if any(k in n for k in ["zamioculcas", "zz", "–∑–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å"]):
        return "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ/–ø—ñ–≤—Ç—ñ–Ω—å. –ü–æ–ª–∏–≤: –ª–∏—à–µ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Å–ª–∞–±–∫–µ —Ä–∞–∑ –Ω–∞ 4‚Äì6 —Ç–∏–∂–Ω—ñ–≤."
    if any(k in n for k in ["dracaena", "–¥—Ä–∞—Ü–µ–Ω–∞"]):
        return "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è 2‚Äì3 —Å–º. –û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è –ª–∏—Å—Ç—è."
    if any(k in n for k in ["chamaedorea", "—Ö–∞–º", "parlor palm", "—Ö–∞–º–∞–µ–¥–æ—Ä–µ—è"]):
        return "–°–≤—ñ—Ç–ª–æ: —Ä–æ–∑—Å—ñ—è–Ω–µ, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ. –ü–æ–ª–∏–≤: —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç. –û–±–ø—Ä–∏—Å–∫—É–≤–∞–Ω–Ω—è."
    if any(k in n for k in ["spathiphyllum", "—Å–ø–∞—Ç—ñ", "peace lily", "—Å–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º"]):
        return "–°–≤—ñ—Ç–ª–æ: –ø—ñ–≤—Ç—ñ–Ω—å/—Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: “ë—Ä—É–Ω—Ç –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ."
    if any(k in n for k in ["calamondin", "citrus", "–∫–∞–ª–∞–º–æ–Ω–¥–∏–Ω", "citrus √ó microcarpa", "–∫—É–º–∫–≤–∞—Ç"]):
        return "–°–≤—ñ—Ç–ª–æ: –¥—É–∂–µ —è—Å–∫—Ä–∞–≤–µ, —Ç—Ä–æ—Ö–∏ –ø—Ä—è–º–æ–≥–æ –≤–µ—á—ñ—Ä–Ω—å–æ–≥–æ. –ü–æ–ª–∏–≤: –∑–ª–µ–≥–∫–∞ –≤–æ–ª–æ–≥–∏–π “ë—Ä—É–Ω—Ç, –±–µ–∑ –∑–∞—Å—Ç–æ—é. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ü–∏—Ç—Ä—É—Å —Ä–∞–∑ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ."
    if any(k in n for k in ["avocado", "persea americana", "–∞–≤–æ–∫–∞–¥–æ"]):
        return "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ, –±–µ–∑ –∂–æ—Ä—Å—Ç–∫–æ–≥–æ –ø–æ–ª—É–¥–µ–Ω–Ω–æ–≥–æ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—ñ—Ö 2‚Äì3 —Å–º. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 3‚Äì4 —Ç–∏–∂–Ω—ñ —É –ø–µ—Ä—ñ–æ–¥ —Ä–æ—Å—Ç—É."
    # –¥–µ—Ñ–æ–ª—Ç
    return "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ. –ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—Ä–æ—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É. –ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: –∑–∞ —Å–µ–∑–æ–Ω–æ–º."

# ====== WIKIMEDIA ======
ALIASES = {
    "–î—Ä–∞—Ü–µ–Ω–∞": ["–î—Ä–∞—Ü–µ–Ω–∞", "Dracaena"],
    "–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω": ["–ö–∞–ª–∞–º–æ–Ω–¥–∏–Ω", "Calamondin", "Citrus √ó microcarpa"],
    "–•–∞–º–∞–µ–¥–æ—Ä–µ—è": ["–•–∞–º–∞–µ–¥–æ—Ä–µ—è", "Chamaedorea elegans", "Parlor palm"],
    "–ó–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å": ["–ó–∞–º—ñ–æ–∫—É–ª—å–∫–∞—Å", "Zamioculcas zamiifolia", "ZZ plant"],
    "–°–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º": ["–°–ø–∞—Ç—ñ—Ñ—ñ–ª—É–º", "Spathiphyllum", "Peace lily"],
}

def _http_bytes(url: str) -> bytes | None:
    try:
        r = requests.get(url, timeout=20)
        if r.ok: return r.content
    except Exception:
        pass
    return None

def _wiki_search_one(query: str, lang: str) -> bytes | None:
    try:
        s = requests.get(
            f"https://{lang}.wikipedia.org/w/api.php",
            params={"action":"query","list":"search","srsearch":query,"format":"json","srlimit":1},
            timeout=20
        ).json()
        hits = s.get("query",{}).get("search",[])
        if not hits: return None
        pid = hits[0]["pageid"]
        info = requests.get(
            f"https://{lang}.wikipedia.org/w/api.php",
            params={"action":"query","pageids":pid,"prop":"pageimages","pithumbsize":800,"format":"json"},
            timeout=20
        ).json()
        thumb = info.get("query",{}).get("pages",{}).get(str(pid),{}).get("thumbnail",{}).get("source")
        if thumb: return _http_bytes(thumb)
    except Exception:
        return None
    return None

def fetch_wiki_image_by_name(name: str) -> bytes | None:
    # 1) –ø—Ä–æ–±—É—î–º–æ –Ω–∞–ø—Ä—è–º—É –Ω–∞ primary lang
    img = _wiki_search_one(name, WIKI_LANG_PRIMARY)
    if img: return img
    # 2) –ø—Ä–æ–±—É—î–º–æ alias-–∏ –Ω–∞ primary lang
    for q in ALIASES.get(name, []):
        img = _wiki_search_one(q, WIKI_LANG_PRIMARY)
        if img: return img
    # 3) fallback –Ω–∞ EN
    img = _wiki_search_one(name, WIKI_LANG_FALLBACK)
    if img: return img
    for q in ALIASES.get(name, []):
        img = _wiki_search_one(q, WIKI_LANG_FALLBACK)
        if img: return img
    return None

# ====== Plant.id (–Ω–∞–∑–≤–∞ + similar image) ======
def plantid_name_and_image(image_bytes: bytes) -> tuple[str|None, bytes|None]:
    if not PLANT_ID_API_KEY:
        return (None, None)
    try:
        url = "https://api.plant.id/v2/identify"
        headers = {"Api-Key": PLANT_ID_API_KEY}
        files = {"images": image_bytes}
        data = {
            "modifiers": ["crops_fast", "similar_images"],
            "plant_language": "en",  # —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–µ –¥–ª—è –Ω–∞–∑–≤
            "plant_details": ["common_names", "url", "wiki_description"]
        }
        resp = requests.post(url, headers=headers, files=files, data={"data": json.dumps(data)}, timeout=45)
        j = resp.json()
        sug = (j.get("suggestions") or [])
        if not sug: return (None, None)
        # –Ω–∞–∑–≤–∞
        name = sug[0].get("plant_name") or (sug[0].get("plant_details",{}).get("common_names") or [None])[0]
        # similar image
        sim = (sug[0].get("similar_images") or [])
        img_bytes = _http_bytes(sim[0]["url"]) if sim else None
        return (name, img_bytes)
    except Exception:
        return (None, None)

# ====== UI ======
def main_kb():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåø –ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏", callback_data="my_plants")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω—É", callback_data="add_plant"),
         InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_plant")],
    ])

def plants_list_kb():
    c = db()
    rows = c.execute("SELECT id, name FROM plants ORDER BY name").fetchall()
    c.close()
    btns = [[InlineKeyboardButton(name, callback_data=f"plant_{pid}")] for (pid, name) in rows]
    btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
    return InlineKeyboardMarkup(btns)

def plant_card_kb(pid:int):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∑ –î–æ–¥–∞—Ç–∏/–æ–Ω–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ", callback_data=f"addphoto_{pid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="my_plants")]
    ])

def delete_list_kb():
    c = db()
    rows = c.execute("SELECT id, name FROM plants ORDER BY name").fetchall()
    c.close()
    btns = [[InlineKeyboardButton(f"üóë {name}", callback_data=f"del_{pid}")] for (pid, name) in rows]
    btns.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
    return InlineKeyboardMarkup(btns)

# ====== STATES ======
SELECT_ADD_MODE, ADD_NAME, ADD_PHOTO_NEW, ADD_PHOTO_EXIST = range(4)

# ====== HANDLERS ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–æ–≥–ª—è–¥—É –∑–∞ —Ä–æ—Å–ª–∏–Ω–∞–º–∏ üå±", reply_markup=main_kb())

async def router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; data = q.data
    await q.answer()
    if data == "my_plants":
        await q.message.reply_text("–¢–≤–æ—ó —Ä–æ—Å–ª–∏–Ω–∏:", reply_markup=plants_list_kb())
    elif data.startswith("plant_"):
        pid = int(data.split("_")[1])
        c = db()
        row = c.execute("SELECT name, care, photo FROM plants WHERE id=?", (pid,)).fetchone()
        c.close()
        if not row:
            await q.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ü—é —Ä–æ—Å–ª–∏–Ω—É ü§î", reply_markup=plants_list_kb()); return
        name, care, photo = row
        caption = f"*{name}*\n{care}"
        if photo:
            await q.message.reply_photo(photo=photo, caption=caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
        else:
            await q.message.reply_text(caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
    elif data == "delete_plant":
        await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ—Å–ª–∏–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=delete_list_kb())
    elif data.startswith("del_"):
        pid = int(data.split("_")[1])
        c = db(); c.execute("DELETE FROM plants WHERE id=?", (pid,)); c.commit(); c.close()
        await q.message.reply_text("–ì–æ—Ç–æ–≤–æ. –í–∏–¥–∞–ª–∏–≤ ‚úÖ", reply_markup=plants_list_kb())
    elif data == "add_plant":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –≤—Ä—É—á–Ω—É", callback_data="mode_name")],
            [InlineKeyboardButton("–§–æ—Ç–æ (–∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è)", callback_data="mode_photo")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")]
        ])
        await q.message.reply_text("–Ø–∫ –¥–æ–¥–∞–º–æ —Ä–æ—Å–ª–∏–Ω—É?", reply_markup=kb)
        return SELECT_ADD_MODE
    elif data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())

# ---- ADD FLOW (conversation #1) ----
async def add_choose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; data = q.data
    await q.answer()
    if data == "mode_name":
        await q.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        return ADD_NAME
    if data == "mode_photo":
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.")
        return ADD_PHOTO_NEW
    if data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())
        return ConversationHandler.END

async def on_add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.message.text or "").strip()
    if not name:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑."); return ADD_NAME
    care = care_for(name)
    photo = fetch_wiki_image_by_name(name)
    c = db(); c.execute("INSERT INTO plants(name, care, photo) VALUES(?,?,?)", (name, care, photo)); c.commit(); c.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{name}¬ª ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

async def on_add_photo_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."); return ADD_PHOTO_NEW
    file = await update.message.photo[-1].get_file()
    img = await file.download_as_bytearray()
    # –í–∏—Ç—è–≥–∞—î–º–æ –Ω–∞–∑–≤—É + similar image
    name, ref_img = plantid_name_and_image(bytes(img))
    name = name or "–ù–æ–≤–∞ —Ä–æ—Å–ª–∏–Ω–∞"
    care = care_for(name)
    photo = ref_img or bytes(img)
    c = db(); c.execute("INSERT INTO plants(name, care, photo) VALUES(?,?,?)", (name, care, photo)); c.commit(); c.close()
    await update.message.reply_text(f"–î–æ–¥–∞–≤ ¬´{name}¬ª ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

# ---- UPDATE PHOTO for existing (conversation #2) ----
async def start_update_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    pid = int(q.data.split("_")[1])
    context.user_data["target_pid"] = pid
    await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ —Ü—ñ—î—ó —Ä–æ—Å–ª–∏–Ω–∏ (jpg/png).")
    return ADD_PHOTO_EXIST

async def on_add_photo_exist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."); return ADD_PHOTO_EXIST
    pid = context.user_data.get("target_pid")
    file = await update.message.photo[-1].get_file()
    img = await file.download_as_bytearray()
    c = db(); c.execute("UPDATE plants SET photo=? WHERE id=?", (bytes(img), pid)); c.commit(); c.close()
    await update.message.reply_text("–§–æ—Ç–æ –æ–Ω–æ–≤–∏–≤ ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_kb())
    return ConversationHandler.END

# ====== BACKFILL PHOTOS ======
def backfill_photos():
    c = db()
    rows = c.execute("SELECT id, name FROM plants WHERE photo IS NULL").fetchall()
    updated = 0
    for pid, name in rows:
        img = fetch_wiki_image_by_name(name)
        if img:
            c.execute("UPDATE plants SET photo=? WHERE id=?", (img, pid)); updated += 1
    c.commit(); c.close()
    return updated

# ====== BOOTSTRAP ======
def build_app():
    app = ApplicationBuilder().token(TOKEN).build()

    # add plant flow
    add_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_choose, pattern="^(mode_name|mode_photo|back_home)$")],
        states={
            SELECT_ADD_MODE: [CallbackQueryHandler(add_choose, pattern="^(mode_name|mode_photo|back_home)$")],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, on_add_name)],
            ADD_PHOTO_NEW: [MessageHandler(filters.PHOTO, on_add_photo_new)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        map_to_parent={ConversationHandler.END: ConversationHandler.END}
    )

    # update photo flow (separate conversation so state —Ç–æ—á–Ω–æ –ª–æ–≤–∏—Ç—å—Å—è)
    upd_photo_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_update_photo, pattern=r"^addphoto_\d+$")],
        states={
            ADD_PHOTO_EXIST: [MessageHandler(filters.PHOTO, on_add_photo_exist)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(add_conv)
    app.add_handler(upd_photo_conv)
    app.add_handler(CallbackQueryHandler(router))  # –∑–∞–≥–∞–ª—å–Ω–∏–π –Ω–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ
    return app

if __name__ == "__main__":
    # —Ä–∞–∑–æ–≤–∏–π –±–µ–∫—Ñ—ñ–ª —Ñ–æ—Ç–æ
    try:
        n = backfill_photos()
        if n:
            requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                          json={"chat_id": os.environ.get("TELEGRAM_CHAT_ID"),
                                "text": f"üñº –î–æ–¥–∞–≤ —Ñ–æ—Ç–æ –∑ –±–∞–∑–∏ –¥–ª—è {n} —Ä–æ—Å–ª–∏–Ω."},
                          timeout=10)
    except Exception:
        pass

    # –ø—ñ–Ω–≥
    try:
        requests.post(f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                      json={"chat_id": os.environ.get("TELEGRAM_CHAT_ID"),
                            "text": "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ ¬´–ú–æ—ó —Ä–æ—Å–ª–∏–Ω–∏¬ª ‚Üì"},
                      timeout=10)
    except Exception:
        pass

    build_app().run_polling(allowed_updates=Update.ALL_TYPES)
