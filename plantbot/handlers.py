# plantbot/handlers.py
from __future__ import annotations

from datetime import date
from typing import Tuple, Optional

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)

from .config import TOKEN, ADMIN_ID, DB_PATH  # ADMIN_ID/DB_PATH –º–æ–∂—É—Ç—å –Ω–µ –∑–Ω–∞–¥–æ–±–∏—Ç–∏—Å—å –ø—Ä—è–º–æ —Ç—É—Ç
from .db import conn, migrate_legacy_rows_to_user
from .keyboards import main_kb, plants_list_kb, plant_card_kb, per_task_buttons
from .schedule import (
    ensure_week_tasks_for_user,
    week_overview_text,
    today_tasks_markup_and_text,
    mark_task_done,
    move_task_to_next_care_day,
    mark_task_skipped,
)
from .resolvers import (
    identify_from_image_bytes,
    parse_identify_response,
    search_name,
    resolve_plant_name,
    wikidata_image_by_qid,
)
from .care import care_and_intervals_for  # –æ—á—ñ–∫—É—î—Ç—å—Å—è —É —Ç–≤–æ—î–º—É care.py

# -------------------------
#  STATE CONSTANTS (PTB v20)
# -------------------------
ADD_CHOOSE, ADD_WAIT_PHOTO, ADD_WAIT_NAME, ADD_CONFIRM, ADD_PHOTO_EXIST, RENAME_WAIT = range(6)

# -------------------------
#  UTILS
# -------------------------
def iso_today() -> str:
    return date.today().isoformat()

def _base_care_text(name: str) -> str:
    return (
        "–°–≤—ñ—Ç–ª–æ: —è—Å–∫—Ä–∞–≤–µ —Ä–æ–∑—Å—ñ—è–Ω–µ.\n"
        "–ü–æ–ª–∏–≤: –ø—ñ—Å–ª—è –ø—ñ–¥—Å–∏—Ö–∞–Ω–Ω—è –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —à–∞—Ä—É “ë—Ä—É–Ω—Ç—É.\n"
        "–ü—ñ–¥–∂–∏–≤–ª–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 2‚Äì4 —Ç–∏–∂–Ω—ñ –≤ —Å–µ–∑–æ–Ω.\n"
    )

def _care_for_with_intervals(name: str) -> Tuple[str, int, int, int]:
    """
    –û–±–≥–æ—Ä—Ç–∞—î care_and_intervals_for(name) —ñ –¥–∞—î —Ñ–æ–ª–±–µ–∫.
    –û—á—ñ–∫—É—î—Ç—å—Å—è, —â–æ care_and_intervals_for –ø–æ–≤–µ—Ä—Ç–∞—î (care_text, water_int, feed_int, mist_int).
    """
    try:
        care, wi, fi, mi = care_and_intervals_for(name)
        if not care:
            care = _base_care_text(name)
        wi = wi or 7
        fi = fi or 30
        mi = mi or 0
        return care, int(wi), int(fi), int(mi)
    except Exception:
        return _base_care_text(name), 7, 30, 0

def _insert_plant_full(uid: int, name: str, care_text: str,
                       wi: int, fi: int, mi: int,
                       photo: Optional[bytes] = None) -> int:
    """
    –í—Å—Ç–∞–≤–ª—è—î —Ä–æ—Å–ª–∏–Ω—É —É —Ç–∞–±–ª–∏—Ü—é plants. –°—Ö–µ–º–∞ –æ—á—ñ–∫—É—î—Ç—å—Å—è —Ç–∞–∫–∞ –∂, —è–∫ –º–∏ —Ä–∞–Ω—ñ—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏:
    (id, user_id, name, care, photo, water_int, feed_int, mist_int, last_watered, last_fed, last_misted, ...)
    Photo –º–æ–∂–µ –±—É—Ç–∏ None.
    """
    c = conn()
    cur = c.cursor()
    cur.execute(
        """INSERT INTO plants(user_id, name, care, photo, water_int, feed_int, mist_int, last_watered, last_fed, last_misted)
           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
        (uid, name, care_text, photo, wi, fi, mi, iso_today(), iso_today(), iso_today())
    )
    plant_id = cur.lastrowid
    c.commit()
    c.close()
    return plant_id

# -------------------------
#  /start
# -------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    migrate_legacy_rows_to_user(uid)
    ensure_week_tasks_for_user(uid)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–æ–≥–ª—è–¥—É –∑–∞ —Ä–æ—Å–ª–∏–Ω–∞–º–∏ üå±", reply_markup=main_kb())

# -------------------------
#  ROUTER FOR INLINE BTNS
# -------------------------
async def router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    uid = update.effective_user.id
    await q.answer()

    # –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    if data == "today_plan":
        ensure_week_tasks_for_user(uid)
        text, kb_rows = today_tasks_markup_and_text(uid, per_task_buttons)
        kb = InlineKeyboardMarkup(kb_rows) if kb_rows else None
        await q.message.reply_text(text, reply_markup=kb or main_kb())
        return

    # –ü–ª–∞–Ω –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
    if data == "week_plan":
        ensure_week_tasks_for_user(uid)
        await q.message.reply_text(week_overview_text(uid), reply_markup=main_kb())
        return

    # –°–ø–∏—Å–æ–∫ —Ä–æ—Å–ª–∏–Ω
    if data == "my_plants":
        c = conn()
        rows = c.execute("SELECT id, name FROM plants WHERE user_id=? ORDER BY name", (uid,)).fetchall()
        c.close()
        if not rows:
            await q.message.reply_text("–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ä–æ—Å–ª–∏–Ω. –î–æ–¥–∞–π –ø–µ—Ä—à—É üå±", reply_markup=main_kb())
            return
        await q.message.reply_text("–¢–≤–æ—ó —Ä–æ—Å–ª–∏–Ω–∏:", reply_markup=plants_list_kb(rows))
        return

    # –ö–∞—Ä—Ç–∫–∞ —Ä–æ—Å–ª–∏–Ω–∏
    if data.startswith("plant_"):
        pid = int(data.split("_")[1])
        c = conn()
        row = c.execute("SELECT name, care, photo FROM plants WHERE id=? AND user_id=?", (pid, uid)).fetchone()
        c.close()
        if not row:
            await q.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ü—é —Ä–æ—Å–ª–∏–Ω—É ü§î", reply_markup=main_kb())
            return
        name, care, photo = row
        caption = f"*{name}*\n{care}"
        if photo:
            await q.message.reply_photo(photo=photo, caption=caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
        else:
            await q.message.reply_text(caption, parse_mode="Markdown", reply_markup=plant_card_kb(pid))
        return

    # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–≥–ª—è–¥ (–ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫)
    if data.startswith("care_"):
        pid = int(data.split("_")[1])
        c = conn()
        row = c.execute("SELECT name FROM plants WHERE id=? AND user_id=?", (pid, uid)).fetchone()
        c.close()
        if not row:
            await q.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤.", reply_markup=main_kb())
            return
        care_text, *_ints = _care_for_with_intervals(row[0])
        await q.message.reply_text(care_text, reply_markup=plant_card_kb(pid))
        return

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ ‚Äî –∑–∞–ø–∏—Ç
    if data.startswith("rename_"):
        pid = int(data.split("_")[1])
        context.user_data["rename_pid"] = pid
        await q.message.reply_text("–í–≤–µ–¥–∏ –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è —Ü—ñ—î—ó —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        return RENAME_WAIT

    # –í–∏–¥–∞–ª–µ–Ω–Ω—è (–º–µ–Ω—é)
    if data == "delete_plant":
        c = conn()
        rows = c.execute("SELECT id, name FROM plants WHERE user_id=? ORDER BY name", (uid,)).fetchall()
        c.close()
        if not rows:
            await q.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_kb())
            return
        buttons = [[InlineKeyboardButton(f"üóë {nm}", callback_data=f"del_{pid}")] for pid, nm in rows]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")])
        await q.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–æ—Å–ª–∏–Ω—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(buttons))
        return

    # –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É
    if data.startswith("del_"):
        pid = int(data.split("_")[1])
        c = conn()
        c.execute("DELETE FROM plants WHERE id=? AND user_id=?", (pid, uid))
        c.execute("DELETE FROM tasks WHERE plant_id=? AND user_id=?", (pid, uid))
        c.commit()
        c.close()
        await q.message.reply_text("–í–∏–¥–∞–ª–∏–≤ ‚úÖ", reply_markup=main_kb())
        return

    # –û–Ω–æ–≤–∏—Ç–∏ —Ñ–æ—Ç–æ –∑–∞ –Ω–∞–∑–≤–æ—é (Wikidata P18)
    if data.startswith("plantidphoto_"):
        pid = int(data.split("_")[1])
        c = conn()
        row = c.execute("SELECT name FROM plants WHERE id=? AND user_id=?", (pid, uid)).fetchone()
        c.close()
        if not row:
            await q.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤.", reply_markup=main_kb())
            return
        r = resolve_plant_name(row[0])
        img = wikidata_image_by_qid(r["qid"]) if r.get("qid") else None
        if not img:
            await q.message.reply_text("–ù–µ –≤–∏–π—à–ª–æ –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –∑–∞ —Ü—ñ—î—é –Ω–∞–∑–≤–æ—é. –°–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç–∏ –Ω–∞–∑–≤—É –∞–±–æ –¥–æ–¥–∞–π —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É.")
            return
        c = conn()
        c.execute("UPDATE plants SET photo=? WHERE id=? AND user_id=?", (img, pid, uid))
        c.commit()
        c.close()
        await q.message.reply_text("–§–æ—Ç–æ –æ–Ω–æ–≤–∏–≤ –∑–∞ –Ω–∞–∑–≤–æ—é ‚úÖ", reply_markup=plant_card_kb(pid))
        return

    # –®–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á—Ü—ñ (–º–∏—Ç—Ç—î–≤–∞ –≤—ñ–¥–º—ñ—Ç–∫–∞)
    if any(data.startswith(p) for p in ["done_water_", "done_feed_", "done_mist_"]):
        pid = int(data.split("_")[2])
        kind = 'water' if "water" in data else ('feed' if "feed" in data else 'mist')
        c = conn()
        c.execute(
            """INSERT INTO tasks(user_id, plant_id, kind, due_date, status, created_at)
               VALUES(?,?,?,?,?,?)""",
            (uid, pid, kind, iso_today(), 'due', iso_today())
        )
        tid = c.execute("SELECT last_insert_rowid()").fetchone()[0]
        c.commit()
        c.close()
        mark_task_done(tid)
        await q.message.reply_text("–ó–∞–ø–∏—Å–∞–≤ ‚úÖ", reply_markup=plant_card_kb(pid))
        return

    # –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É –¥–ª—è —ñ—Å–Ω—É—é—á–æ—ó —Ä–æ—Å–ª–∏–Ω–∏
    if data.startswith("addphoto_"):
        pid = int(data.split("_")[1])
        context.user_data["target_pid"] = pid
        await q.message.reply_text("–ù–∞–¥—ñ—à–ª–∏ –æ–¥–Ω–µ —Ñ–æ—Ç–æ —Ü—ñ—î—ó —Ä–æ—Å–ª–∏–Ω–∏ (jpg/png).")
        return ADD_PHOTO_EXIST

    # –ù–∞–∑–∞–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    if data == "back_home":
        await q.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())
        return

# -------------------------
#  RENAME: —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—ó –Ω–∞–∑–≤–∏
# -------------------------
async def on_rename_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    pid = context.user_data.get("rename_pid")
    new_raw = (update.message.text or "").strip()
    if not pid or not new_raw:
        await update.message.reply_text("–ü–æ—Ä–æ–∂–Ω—è –Ω–∞–∑–≤–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return RENAME_WAIT

    # –í–∏—Ä—ñ—à—É—î–º–æ –∫–∞–Ω–æ–Ω—ñ—á–Ω—É –Ω–∞–∑–≤—É —ñ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–æ–≥–ª—è–¥/—ñ–Ω—Ç–µ—Ä–≤–∞–ª–∏
    r = resolve_plant_name(new_raw)
    canonical = r.get("canonical") or new_raw
    care_text, wi, fi, mi = _care_for_with_intervals(canonical)

    c = conn()
    c.execute(
        """UPDATE plants SET name=?, care=?, water_int=?, feed_int=?, mist_int=?
           WHERE id=? AND user_id=?""",
        (new_raw, care_text, wi, fi, mi, pid, uid)
    )
    c.commit()
    c.close()

    # –°–ø—Ä–æ–±–∞ –ø—ñ–¥—Ç—è–≥—Ç–∏ —Ñ–æ—Ç–æ (—è–∫—â–æ —î QID)
    img = wikidata_image_by_qid(r.get("qid")) if r.get("qid") else None
    if img:
        c = conn()
        c.execute("UPDATE plants SET photo=? WHERE id=? AND user_id=?", (img, pid, uid))
        c.commit()
        c.close()

    await update.message.reply_text(
        f"–û–Ω–æ–≤–∏–≤ –Ω–∞–∑–≤—É –Ω–∞ ¬´{new_raw}¬ª. –†–æ–∑–ø—ñ–∑–Ω–∞–≤ —è–∫: {canonical} ({r.get('source','')}). –î–æ–≥–ª—è–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=main_kb()
    )
    return ConversationHandler.END

# -------------------------
#  ADD FLOW (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Üí –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)
# -------------------------
async def add_plant_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –¥–æ–¥–∞–≤–∞–Ω–Ω—è ‚Äî –ø–æ–∫–∞–∑—É—î –≤–∏–±—ñ—Ä —Å–ø–æ—Å–æ–±—É."""
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É –≤—Ä—É—á–Ω—É", callback_data="add_by_name")],
        [InlineKeyboardButton("–§–æ—Ç–æ (–∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è)", callback_data="add_by_photo")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_home")],
    ])
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–Ø–∫ –¥–æ–¥–∞—î–º–æ —Ä–æ—Å–ª–∏–Ω—É?", reply_markup=kb)
    else:
        await update.message.reply_text("–Ø–∫ –¥–æ–¥–∞—î–º–æ —Ä–æ—Å–ª–∏–Ω—É?", reply_markup=kb)
    return ADD_CHOOSE

async def add_choose_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data
    await q.answer()
    if data == "add_by_photo":
        await q.edit_message_text("–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º (jpg/png).")
        return ADD_WAIT_PHOTO
    if data == "add_by_name":
        await q.edit_message_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ä–æ—Å–ª–∏–Ω–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º:")
        return ADD_WAIT_NAME
    if data == "back_home":
        await q.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_kb())
        return ConversationHandler.END
    return ADD_CHOOSE

async def add_receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—Ä–∏–º—É—î —Ñ–æ—Ç–æ, –ø–µ—Ä–µ–≤—ñ—Ä—è—î Plant.id (is_plant/conf), –ø—Ä–æ—Å–∏—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    if not update.message or not update.message.photo:
        await update.message.reply_text("–¢—Ä–µ–±–∞ —Å–∞–º–µ —Ñ–æ—Ç–æ üåø")
        return ADD_WAIT_PHOTO

    tg_file = await update.message.photo[-1].get_file()
    img_bytes = await tg_file.download_as_bytearray()
    img_bytes = bytes(img_bytes)

    try:
        resp = identify_from_image_bytes(img_bytes)
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
        return ADD_WAIT_PHOTO

    is_plant, conf, name, extra = parse_identify_response(resp)
    if not is_plant or not name:
        await update.message.reply_text("–°—Ö–æ–∂–µ, –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–æ—Å–ª–∏–Ω–∞ –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–ø—ñ–∑–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–µ —Ñ–æ—Ç–æ.")
        return ADD_WAIT_PHOTO

    context.user_data["pending_plant"] = {"name": name, "confidence": conf, "extra": extra}
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–æ–¥–∞—Ç–∏", callback_data="confirm_add")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_add")],
    ])
    await update.message.reply_text(
        f"–Ø –¥—É–º–∞—é, —â–æ —Ü–µ **{name}** (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å {conf:.1f}%). –î–æ–¥–∞—Ç–∏ —É —Å–ø–∏—Å–æ–∫?",
        reply_markup=kb
    )
    return ADD_CONFIRM

async def add_receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—Ä–∏–º—É—î —Ç–µ–∫—Å—Ç–æ–≤—É –Ω–∞–∑–≤—É, –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–µ—Ä–µ–∑ name_search, –ø—Ä–æ—Å–∏—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."""
    query = (update.message.text or "").strip()
    if not query:
        await update.message.reply_text("–í–≤–µ–¥–∏ —â–æ—Å—å —Å—Ö–æ–∂–µ –Ω–∞ –Ω–∞–∑–≤—É —Ä–æ—Å–ª–∏–Ω–∏ üôÇ")
        return ADD_WAIT_NAME

    ok, conf, name, extra = search_name(query)
    if not ok or not name:
        await update.message.reply_text("–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ—ó —Ä–æ—Å–ª–∏–Ω–∏. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É –Ω–∞–∑–≤—É –∞–±–æ –¥–æ–¥–∞–π –∑–∞ —Ñ–æ—Ç–æ.")
        return ADD_WAIT_NAME

    context.user_data["pending_plant"] = {"name": name, "confidence": conf, "extra": extra}
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–æ–¥–∞—Ç–∏", callback_data="confirm_add")],
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_add")],
    ])
    await update.message.reply_text(
        f"–ó–Ω–∞–π—à–æ–≤: **{name}** (–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å {conf:.1f}%). –î–æ–¥–∞—Ç–∏ —É —Å–ø–∏—Å–æ–∫?",
        reply_markup=kb
    )
    return ADD_CONFIRM

async def add_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = context.user_data.get("pending_plant") or {}
    name = data.get("name")
    if not name:
        await q.edit_message_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ü§∑‚Äç‚ôÇÔ∏è")
        return ConversationHandler.END

    uid = q.from_user.id
    care_text, wi, fi, mi = _care_for_with_intervals(name)
    plant_id = _insert_plant_full(uid, name, care_text, wi, fi, mi, photo=None)

    ensure_week_tasks_for_user(uid)
    await q.edit_message_text(f"–î–æ–¥–∞–≤ **{name}** ‚úÖ (id: {plant_id}). –†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
    context.user_data.pop("pending_plant", None)
    return ConversationHandler.END

async def add_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ ‚ùå")
    context.user_data.pop("pending_plant", None)
    return ConversationHandler.END

# -------------------------
#  UPDATE PHOTO for existing by upload
# -------------------------
async def on_add_photo_exist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if not update.message or not update.message.photo:
        await update.message.reply_text("–¶–µ –Ω–µ —Ñ–æ—Ç–æ üôÉ –ù–∞–¥—ñ—à–ª–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return ADD_PHOTO_EXIST
    pid = context.user_data.get("target_pid")
    if not pid:
        await update.message.reply_text("–ù–µ –≤–∏–±—Ä–∞–Ω–æ —Ä–æ—Å–ª–∏–Ω—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ.")
        return ConversationHandler.END

    tgfile = await update.message.photo[-1].get_file()
    img_bytes = await tgfile.download_as_bytearray()

    c = conn()
    c.execute("UPDATE plants SET photo=? WHERE id=? AND user_id=?", (bytes(img_bytes), pid, uid))
    c.commit()
    c.close()
    await update.message.reply_text("–§–æ—Ç–æ –æ–Ω–æ–≤–∏–≤ ‚úÖ", reply_markup=main_kb())
    return ConversationHandler.END

# -------------------------
#  TASK ACTIONS (–ø–µ—Ä-—Ä–æ—Å–ª–∏–Ω–Ω–æ)
# -------------------------
async def on_task_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    try:
        _, tid_str, action = q.data.split(":")
        tid = int(tid_str)
    except Exception:
        await q.answer("–ü–æ–º–∏–ª–∫–∞ callback")
        return

    if action == "done":
        mark_task_done(tid)
        await q.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
    elif action == "defer":
        move_task_to_next_care_day(tid)
        await q.answer("–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ‚è©")
    elif action == "skip":
        mark_task_skipped(tid)
        await q.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ üö´")

    uid = update.effective_user.id
    text, kb_rows = today_tasks_markup_and_text(uid, per_task_buttons)
    kb = InlineKeyboardMarkup(kb_rows) if kb_rows else None
    # edit_text –º–æ–∂–µ –≤–ø–∞—Å—Ç–∏, —è–∫—â–æ —Å—Ç–∞—Ä–∞ —Ä–æ–∑–º—ñ—Ç–∫–∞ –Ω–µ —Å–ø—ñ–≤–ø–∞–ª–∞ ‚Äî —Ç–æ–¥—ñ –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–µ–º–æ –Ω–æ–≤–µ
    try:
        await q.message.edit_text(text, reply_markup=kb or None)
    except Exception:
        await q.message.reply_text(text, reply_markup=kb or None)

# -------------------------
#  BUILD APP
# -------------------------
def build_app() -> Application:
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", cmd_start))

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ—Å–ª–∏–Ω (–∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω —ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é)
    add_flow = ConversationHandler(
        entry_points=[
            CommandHandler("add", add_plant_entry),                             # /add
            CallbackQueryHandler(add_plant_entry, pattern=r"^add_plant$"),     # –∫–Ω–æ–ø–∫–∞ "–î–æ–¥–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω—É"
        ],
        states={
            ADD_CHOOSE: [
                CallbackQueryHandler(add_choose_router, pattern=r"^(add_by_photo|add_by_name|back_home)$"),
            ],
            ADD_WAIT_PHOTO: [
                MessageHandler(filters.PHOTO, add_receive_photo),
            ],
            ADD_WAIT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_receive_name),
            ],
            ADD_CONFIRM: [
                CallbackQueryHandler(add_confirm, pattern=r"^confirm_add$"),
                CallbackQueryHandler(add_cancel, pattern=r"^cancel_add$"),
            ],
            ADD_PHOTO_EXIST: [
                MessageHandler(filters.PHOTO, on_add_photo_exist),
            ],
            RENAME_WAIT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, on_rename_text),
            ],
        },
        fallbacks=[CallbackQueryHandler(add_cancel, pattern=r"^cancel_add$")],
        allow_reentry=True,
    )
    app.add_handler(add_flow)

    # –û–∫—Ä–µ–º—ñ callback-–∏
    app.add_handler(CallbackQueryHandler(on_task_action, pattern=r"^task:\d+:(done|defer|skip)$"))

    # Catch-all —Ä–æ—É—Ç–µ—Ä (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º)
    app.add_handler(CallbackQueryHandler(router))

    return app
